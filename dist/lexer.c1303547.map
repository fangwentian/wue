{"version":3,"sources":["../compiler/token.js","../compiler/state.js","../compiler/lexer.js","../compiler/parser.js","../compiler/index.js","../index.js","lexer.js"],"names":["Token","type","value","extra","Object","assign","State","state","name","push","undefined","is","pop","length","ncname","qname","startTagOpen","RegExp","startTagClose","attribute","endTag","whitespace","text","Lexer","source","options","rest","tokens","trim","token","advance","eof","slice","res","exec","skip","Parser","lexer","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAAqBA,QACjB,eAAYC,IAAZ,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,SAAKF,IAAL,GAAYA,IAAZ;;AAEA,QAAIC,KAAJ,EAAW;AACP,aAAKA,KAAL,GAAaA,KAAb;AACH;;AAED,QAAIC,KAAJ,EAAW;AACPC,eAAOC,MAAP,CAAc,IAAd,EAAoBF,KAApB;AACH;AACJ;;kBAXgBH;;;;;;;;;;;;ICAAM;AACjB,qBAAc;AAAA;;AACV,aAAKC,KAAL,GAAa,EAAb;AACH;;;;6BAEIC,MAAM;AACP,iBAAKD,KAAL,CAAWE,IAAX,CAAgBD,IAAhB;AACH;;;4BAEGA,MAAM;AACN,gBAAGA,SAASE,SAAT,IAAsB,KAAKC,EAAL,CAAQH,IAAR,CAAzB,EAAwC;AACpC,qBAAKD,KAAL,CAAWK,GAAX;AACH;AACJ;;;2BAEEJ,MAAM;AACL,mBAAO,KAAKD,KAAL,CAAW,KAAKA,KAAL,CAAWM,MAAX,GAAoB,CAA/B,MAAsCL,IAA7C;AACH;;;;;;kBAjBgBF;;;;;;;;;;ACArB;;;;AACA;;;;;;;;AAEA,IAAMQ,SAAS,uBAAf;AACA,IAAMC,iBAAeD,MAAf,aAA6BA,MAA7B,MAAN;AACA,IAAME,gBAAe,IAAIC,MAAJ,QAAgBF,KAAhB,CAArB;AACA,IAAMG,iBAAgB,SAAtB;AACA,IAAMC,aAAY,wEAAlB;AACA,IAAMC,UAAS,IAAIH,MAAJ,WAAmBF,KAAnB,YAAf;AACA,IAAMM,cAAa,MAAnB;AACA,IAAMC,QAAO,UAAb;AACA;;IAEqBC;AACjB,yBAA2C;AAAA,+BAA7BC,MAA6B;AAAA,YAA7BA,MAA6B,+BAApB,EAAoB;AAAA,gCAAhBC,OAAgB;AAAA,YAAhBA,OAAgB,gCAAN,EAAM;;AAAA;;AACvC,aAAKD,MAAL,GAAcA,MAAd;AACA,aAAKE,IAAL,GAAYF,MAAZ;AACA,aAAKC,OAAL,GAAeA,OAAf;AACA,aAAKE,MAAL,GAAc,EAAd;AACA,aAAKpB,KAAL,GAAa,IAAID,eAAJ,EAAb;AACH;;;;gCAEO;AACJ,gBAAG,KAAKmB,OAAL,CAAaG,IAAhB,EAAsB;AAClB,qBAAKF,IAAL,GAAY,KAAKA,IAAL,CAAUE,IAAV,EAAZ;AACH;AACD,gBAAIC,QAAQ,KAAKC,OAAL,EAAZ;AACA,mBAAOD,SAASA,MAAM5B,IAAN,KAAe,KAA/B,EAAsC;AAClC,qBAAK0B,MAAL,CAAYlB,IAAZ,CAAiBoB,KAAjB;AACAA,wBAAQ,KAAKC,OAAL,EAAR;AACH;AACD,iBAAKH,MAAL,CAAYlB,IAAZ,CAAiB,IAAIT,eAAJ,CAAU,KAAV,CAAjB;AACA,mBAAO,KAAK2B,MAAZ;AACH;;;kCAES;AACN,gBAAME,QACF,KAAKE,GAAL,MACA,KAAKV,UAAL,EADA,IAEA,KAAKL,YAAL,EAFA,IAGA,KAAKG,SAAL,EAHA,IAIA,KAAKD,aAAL,EAJA,IAKA,KAAKE,MAAL,EALA,IAMA,KAAKE,IAAL,EAPJ;;AASA,mBAAOO,KAAP;AACH;;;6BAEIhB,QAAQ;AACT,iBAAKa,IAAL,GAAY,KAAKA,IAAL,CAAUM,KAAV,CAAgBnB,MAAhB,CAAZ;AACH;;;8BAEK;AACF,gBAAI,KAAKa,IAAL,CAAUb,MAAV,GAAmB,CAAvB,EAA0B,OAAO,KAAP;AAC1B,mBAAO,IAAIb,eAAJ,CAAU,KAAV,CAAP;AACH;;;qCAEY;AACT,gBAAMiC,MAAMZ,YAAWa,IAAX,CAAgB,KAAKR,IAArB,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAKE,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,uBAAO,IAAIb,eAAJ,CAAU,YAAV,EAAwBiC,IAAI,CAAJ,CAAxB,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;uCAEc;AACX,gBAAMA,MAAMjB,cAAakB,IAAb,CAAkB,KAAKR,IAAvB,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAK1B,KAAL,CAAWE,IAAX,CAAgB,cAAhB;AACA,qBAAK0B,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,uBAAO,IAAIb,eAAJ,CAAU,cAAV,EAA0BiC,IAAI,CAAJ,CAA1B,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;oCAEW;AACR,gBAAG,CAAC,KAAK1B,KAAL,CAAWI,EAAX,CAAc,cAAd,CAAJ,EAAmC,OAAO,KAAP;;AAEnC,gBAAMsB,MAAMd,WAAUe,IAAV,CAAe,KAAKR,IAApB,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAKE,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,oBAAML,OAAOyB,IAAI,CAAJ,CAAb;AACA,oBAAM/B,QAAQ+B,IAAI,CAAJ,KAAUA,IAAI,CAAJ,CAAV,IAAoBA,IAAI,CAAJ,CAAlC;AACA,uBAAO,IAAIjC,eAAJ,CAAU,WAAV,EAAuB,EAAEQ,UAAF,EAAQN,YAAR,EAAvB,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;wCAEe;AACZ,gBAAG,CAAC,KAAKK,KAAL,CAAWI,EAAX,CAAc,cAAd,CAAJ,EAAmC,OAAO,KAAP;;AAEnC,gBAAMsB,MAAMf,eAAcgB,IAAd,CAAmB,KAAKR,IAAxB,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAK1B,KAAL,CAAWK,GAAX;AACA,qBAAKuB,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,uBAAO,IAAIb,eAAJ,CAAU,eAAV,EAA2BiC,IAAI,CAAJ,CAA3B,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;iCAEQ;AACL,gBAAMA,MAAMb,QAAOc,IAAP,CAAY,KAAKR,IAAjB,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAKE,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,uBAAO,IAAIb,eAAJ,CAAU,QAAV,EAAoBiC,IAAI,CAAJ,CAApB,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;+BAEM;AACH,gBAAG,KAAK1B,KAAL,CAAWI,EAAX,CAAc,cAAd,CAAH,EAAkC,OAAO,KAAP;;AAElC,gBAAMsB,MAAMX,MAAKY,IAAL,CAAU,KAAKR,IAAf,CAAZ;;AAEA,gBAAGO,GAAH,EAAQ;AACJ,qBAAKE,IAAL,CAAUF,IAAI,CAAJ,EAAOpB,MAAjB;AACA,uBAAO,IAAIb,eAAJ,CAAU,MAAV,EAAkBiC,IAAI,CAAJ,CAAlB,CAAP;AACH;AACD,mBAAO,KAAP;AACH;;;;;;kBAhHgBV;;;;;;;kBCbN;;;;;;;;;ACAf;;;;AACA;;;;;;QAESA,QAAAA;QAAOa,SAAAA;;;;;;;;;;;;;qBCHPb;;;;;;qBAAOa;;;;;;ACAhB;;AAEA,IAAMZ,kHAAN;;AAOA,IAAMG,SAAS,IAAIJ,YAAJ,CAAU;AACrBC;AADqB,CAAV,EAEZa,KAFY,EAAf;;AAIAC,QAAQC,GAAR,CAAYZ,MAAZ","file":"lexer.c1303547.map","sourceRoot":"../examples/lexer","sourcesContent":["export default class Token {\n    constructor(type, value, extra) {\n        this.type = type;\n        \n        if (value) {\n            this.value = value;\n        }\n\n        if (extra) {\n            Object.assign(this, extra);\n        }\n    }\n}","export default class State {\n    constructor() {\n        this.state = []\n    }\n\n    push(name) {\n        this.state.push(name)\n    }\n\n    pop(name) {\n        if(name === undefined || this.is(name)) {\n            this.state.pop()\n        }\n    }\n\n    is(name) {\n        return this.state[this.state.length - 1] === name;\n    }\n}","import Token from './token'\nimport State from './state'\n\nconst ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*'\nconst qname = `((?:${ncname}\\\\:)?${ncname})`\nconst startTagOpen = new RegExp(`^<${qname}`)\nconst startTagClose = /^(\\/?)>/\nconst attribute = /^([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\nconst endTag = new RegExp(`^<\\\\/${qname}[^>]*>`)\nconst whitespace = /^\\s+/\nconst text = /^[^\\x00]/\n// TODO doctype, comment\n\nexport default class Lexer {\n    constructor({ source = '', options = {} }) {\n        this.source = source;\n        this.rest = source;\n        this.options = options;\n        this.tokens = [];\n        this.state = new State();\n    }\n\n    lexer() {\n        if(this.options.trim) {\n            this.rest = this.rest.trim();\n        }\n        let token = this.advance();\n        while (token && token.type !== 'eof') {\n            this.tokens.push(token);\n            token = this.advance();\n        }\n        this.tokens.push(new Token('eof'));\n        return this.tokens;\n    }\n\n    advance() {\n        const token =\n            this.eof() ||\n            this.whitespace() ||\n            this.startTagOpen() ||\n            this.attribute() ||\n            this.startTagClose() ||\n            this.endTag() ||\n            this.text()\n\n        return token;\n    }\n\n    skip(length) {\n        this.rest = this.rest.slice(length);\n    }\n\n    eof() {\n        if (this.rest.length > 0) return false;\n        return new Token('eof');\n    }\n\n    whitespace() {\n        const res = whitespace.exec(this.rest)\n\n        if(res) {\n            this.skip(res[0].length);\n            return new Token('whitespace', res[0]);\n        }\n        return false;\n    }\n\n    startTagOpen() {\n        const res = startTagOpen.exec(this.rest);\n\n        if(res) {\n            this.state.push('startTagOpen');\n            this.skip(res[0].length);\n            return new Token('startTagOpen', res[0]);\n        }\n        return false;\n    }\n\n    attribute() {\n        if(!this.state.is('startTagOpen')) return false;\n\n        const res = attribute.exec(this.rest);\n\n        if(res) {\n            this.skip(res[0].length);\n            const name = res[1];\n            const value = res[3] || res[4] || res[5];\n            return new Token('attribute', { name, value })\n        }\n        return false;\n    }\n\n    startTagClose() {\n        if(!this.state.is('startTagOpen')) return false;\n\n        const res = startTagClose.exec(this.rest);\n\n        if(res) {\n            this.state.pop();\n            this.skip(res[0].length);\n            return new Token('startTagClose', res[0]);\n        }\n        return false;\n    }\n\n    endTag() {\n        const res = endTag.exec(this.rest);\n\n        if(res) {\n            this.skip(res[0].length);\n            return new Token('endTag', res[0]);\n        }\n        return false;\n    }\n\n    text() {\n        if(this.state.is('startTagOpen')) return false;\n\n        const res = text.exec(this.rest);\n\n        if(res) {\n            this.skip(res[0].length);\n            return new Token('text', res[0]);\n        }\n        return false;\n    }\n}","export default {}","import Lexer from './lexer'\nimport Parser from './parser'\n\nexport { Lexer, Parser }","export { Lexer, Parser } from './compiler'","import { Lexer } from '../../index'\n\nconst source = `\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"name\">\n        <p>{{name}}</p>\n    </div>\n`\n\nconst tokens = new Lexer({\n    source\n}).lexer()\n\nconsole.log(tokens)"]}